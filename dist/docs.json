{
  "src/components/collection/index.js": {
    "description": "A component for rendering collections. expects a path and a render function. the render function receives the collection item as an argument.",
    "displayName": "Collection",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "key",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "path": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "the path of the data in the database."
      },
      "renderItem": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "will be called when the data is available, expects it to return a renderable value. (collectionItem) => ReactNode",
        "defaultValue": {
          "value": "() => null",
          "computed": false
        }
      },
      "lightOverlay": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "will render the edit overlay in alternate colors to support different color schemes.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "orderBy": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "enum",
            "value": [
              {
                "value": "'asc'",
                "computed": false
              },
              {
                "value": "'desc'",
                "computed": false
              }
            ]
          }
        },
        "required": false,
        "description": "define Firestore's ordering rules"
      },
      "where": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "shape",
            "value": {
              "==": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  }
                ],
                "required": false
              },
              "!=": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  }
                ],
                "required": false
              },
              ">=": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  }
                ],
                "required": false
              },
              "<=": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  }
                ],
                "required": false
              }
            }
          }
        },
        "required": false,
        "description": "define Firestore's filtering rules"
      },
      "limit": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "define Firestore's limit"
      }
    }
  },
  "src/components/list/index.js": {
    "description": "A component for rendering lists. expects a path and a render function. the render function receives the collection item as an argument.",
    "displayName": "List",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "key",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "path": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "the path of the data in the database."
      },
      "renderItem": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "will be called when the data is available, expects it to return a renderable value. (collectionItem) => ReactNode",
        "defaultValue": {
          "value": "() => null",
          "computed": false
        }
      },
      "lightOverlay": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "will render the edit overlay in alternate colors to support different color schemes.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "src/components/provider/index.js": {
    "description": "The root of every Orkan app, provides a react contextual api to every other orkan component in the tree.",
    "displayName": "Provider",
    "methods": [
      {
        "name": "guestLogin",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "activateAdmin",
        "docblock": null,
        "modifiers": [
          "async"
        ],
        "params": [],
        "returns": null
      },
      {
        "name": "exposeDependencies",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleStoreReady",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "store",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleBlur",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleEditKeyDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleEditKeyUp",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "adminConfig": {
        "type": {
          "name": "shape",
          "value": {
            "color": {
              "name": "enum",
              "value": [
                {
                  "value": "'default'",
                  "computed": false
                },
                {
                  "value": "'dark'",
                  "computed": false
                }
              ],
              "required": false
            },
            "authProviders": {
              "name": "arrayOf",
              "value": {
                "name": "enum",
                "computed": true,
                "value": "SUPPORTED_AUTH_PROVIDERS"
              },
              "required": false
            },
            "allowGuests": {
              "name": "bool",
              "required": false
            }
          }
        },
        "required": false,
        "description": "a configuration object for the admin interface, leaving it undefined will disable the admin entirely.\nsupported auth providers: 'google', 'facebook', 'github'."
      },
      "firebaseConfig": {
        "type": {
          "name": "shape",
          "value": {
            "apiKey": {
              "name": "string",
              "required": false
            },
            "authDomain": {
              "name": "string",
              "required": false
            },
            "databaseURL": {
              "name": "string",
              "required": false
            },
            "projectId": {
              "name": "string",
              "required": false
            },
            "storageBucket": {
              "name": "string",
              "required": false
            },
            "messagingSenderId": {
              "name": "string",
              "required": false
            }
          }
        },
        "required": true,
        "description": "Firebase config object copied from the Firebase console."
      }
    },
    "childContext": {
      "OrkanContext": {
        "type": {
          "name": "object"
        },
        "required": false
      }
    }
  },
  "src/components/value/index.js": {
    "description": "A component for rendering simple values by their path.",
    "displayName": "Value",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "path": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "the path of the data in the database."
      },
      "html": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "if set to true, will render the value as html, perfect for WYSIWYG purposes."
      },
      "lightOverlay": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "will render the edit overlay in alternate colors to support different color schemes.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "src/components/with-value/index.js": {
    "description": "A components for rendering any value, expects a path and a render function. the render function receives the value as an argument.",
    "displayName": "WithValue",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "originalHandler",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "path": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "the path of the data in the database."
      },
      "lightOverlay": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "will render the edit overlay in alternate colors to support different color schemes.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "render": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "will be called when the data is available, expects it to return a renderable value. (value) => ReactNode"
      }
    }
  }
}